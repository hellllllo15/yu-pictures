server:
  port: 8123
  servlet:
    context-path: /api

spring:
  application:
    name: yun-pictures
  profiles:
    active: local

  #    开发更大的文件上传体积
  servlet:
    multipart:
      max-file-size: 10MB


  #数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/yun-pictures-1?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true
    username: root
    password: 123456



    #  # 空间图片分表 - 使用ShardingSphere管理数据源
    #  shardingsphere:
    #      datasource:
    #        names: yun_pictures_1
    #        yun_pictures_1:
    #          type: com.zaxxer.hikari.HikariDataSource
    #          driver-class-name: com.mysql.cj.jdbc.Driver
    #          url: jdbc:mysql://localhost:3306/yun-pictures-1?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true
    #          username: root
    #          password: 123456
    #      rules:
    #        sharding:
    #          tables:
    #            picture:
    #              actual-data-nodes: yun_pictures_1.picture  # 数据源名.表名
    #              table-strategy:
    #                standard:
    #                  sharding-column: spaceId  # 分片字段，对应数据库表中的字段名
    #                  sharding-algorithm-name: picture_sharding_algorithm
    #          sharding-algorithms:
    #            picture_sharding_algorithm:
    #              type: CLASS_BASED
    #              props:
    #                strategy: standard
    #                algorithmClassName: com.example.demo.manager.sharding.PictureShardingAlgorithm
    #      props:
    #        sql-show: true




    # Redis 配置
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 5000


mybatis-plus:
  configuration:
    # MyBatis 配置
    map-underscore-to-camel-case: false
    # 仅在开发环境打印日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    enable-sql-runner: true
    db-config:
      logic-delete-field: deleted # 全局逻辑删除字段名
      logic-delete-value: 1 # 逻辑已删除值。可选，默认值为 1
      logic-not-delete-value: 0 # 逻辑未删除值。可选，默认值为 0

# 日志配置 - 只显示数据库相关日志
logging:
  level:
    # 关闭Spring Boot启动日志
    org.springframework: WARN
    # 关闭ShardingSphere大部分日志，只保留SQL日志
    org.apache.shardingsphere: WARN
    # 保留ShardingSphere SQL日志
    org.apache.shardingsphere.infra.executor.sql.execute.engine.driver.jdbc.JDBCExecutor: DEBUG
    # 保留MyBatis SQL日志
    com.example.demo.mapper: DEBUG
    # 关闭其他框架日志
    org.apache.catalina: WARN
    org.apache.tomcat: WARN
    org.springframework.web: WARN
    org.springframework.boot: WARN
    com.zaxxer.hikari: WARN
    # 关闭应用启动日志
    com.example.demo: WARN
  # 接口文档配置
knife4j:
  enable: true
  openapi:
    title: 接口文档
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          com.example.demo.controller

